name: CD

on:
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publishing ${{ matrix.build_target }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        build_target: [linux-amd64, linux-arm64, macos, windows]
        include:
          - build_target: linux-amd64
            os: ubuntu-latest
            artifact_suffix: linux-x86_64
            target: x86_64-unknown-linux-gnu
            features: ''
          - build_target: linux-arm64
            os: ubuntu-latest
            container: rustembedded/cross:aarch64-unknown-linux-gnu-0.2.1
            artifact_suffix: linux-arm64
            target: aarch64-unknown-linux-gnu
            features: '--no-default-features --features alsa_backend,cursive/pancurses-backend'
          - build_target: macos
            os: macos-latest
            artifact_suffix: macos-x86_64
            target: x86_64-apple-darwin
            features: '--no-default-features --features portaudio_backend,cursive/pancurses-backend'
          - build_target: windows
            os: windows-latest
            artifact_suffix: windows-x86_64
            target: x86_64-pc-windows-msvc
            features: '--no-default-features --features rodio_backend,cursive/pancurses-backend'
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          profile: minimal
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install portaudio pkg-config
      - name: Install Linux dependencies (arm64)
        if: matrix.build_target == 'linux-arm64'
        run: |
          dpkg --add-architecture arm64
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          apt update
          apt install -y libasound2-dev:arm64 libncursesw5-dev:arm64 libssl-dev:arm64
      - name: Install Linux dependencies (amd64)
        if: matrix.build_target == 'linux-amd64'
        run: |
          sudo apt update
          sudo apt install libpulse-dev libdbus-1-dev libncursesw5-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - uses: actions/checkout@v2
        name: Checkout src
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Running cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release --target ${{ matrix.target }} ${{ matrix.features }}
      - name: Extract git tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_tag
      - name: Packaging assets
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          case ${{ matrix.target }} in
          *-pc-windows-*) 
            7z -y a ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.zip ncspot.exe
            sha256sum ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.zip > ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.sha256
            ;;
          *) 
            tar czvf ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.tar.gz ncspot
            shasum -a 256 ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.tar.gz > ncspot-${{ steps.extract_tag.outputs.tag }}-${{ matrix.artifact_suffix }}.sha256
            ;;
          esac;
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: target/${{ matrix.target }}/release/ncspot-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
